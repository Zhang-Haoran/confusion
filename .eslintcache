[{"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\index.js":"1","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\App.js":"2","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\reportWebVitals.js":"3","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\MenuComponent.js":"4","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\dishes.js":"5","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\DishdetailComponent.js":"6","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\MainComponent.js":"7","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\HeaderComponent.js":"8","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\FooterComponent.js":"9","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\HomeComponent.js":"10","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\ContactComponent.js":"11","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\comments.js":"12","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\promotions.js":"13","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\leaders.js":"14","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\AboutComponent.js":"15","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\RenderLeader.js":"16","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\configureStore.js":"17","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\reducer.js":"18","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\comments.js":"19","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\leaders.js":"20","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\dishes.js":"21","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\promotions.js":"22","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\ActionTypes.js":"23","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\ActionCreators.js":"24","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\LoadingComponent.js":"25","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\form.js":"26"},{"size":437,"mtime":1609755800196,"results":"27","hashOfConfig":"28"},{"size":519,"mtime":1610357220377,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":2417,"mtime":1610486313847,"results":"31","hashOfConfig":"28"},{"size":1598,"mtime":1609918282729,"results":"32","hashOfConfig":"28"},{"size":8413,"mtime":1610485816885,"results":"33","hashOfConfig":"28"},{"size":3105,"mtime":1610488788062,"results":"34","hashOfConfig":"28"},{"size":5555,"mtime":1610261851584,"results":"35","hashOfConfig":"28"},{"size":2826,"mtime":1609825898410,"results":"36","hashOfConfig":"28"},{"size":1418,"mtime":1610486313857,"results":"37","hashOfConfig":"28"},{"size":11868,"mtime":1610488926364,"results":"38","hashOfConfig":"28"},{"size":4927,"mtime":1609910465960,"results":"39","hashOfConfig":"28"},{"size":457,"mtime":1609910472787,"results":"40","hashOfConfig":"28"},{"size":2432,"mtime":1609911353785,"results":"41","hashOfConfig":"28"},{"size":3836,"mtime":1610017896253,"results":"42","hashOfConfig":"28"},{"size":836,"mtime":1610020968490,"results":"43","hashOfConfig":"28"},{"size":794,"mtime":1610488588617,"results":"44","hashOfConfig":"28"},{"size":394,"mtime":1610357220357,"results":"45","hashOfConfig":"28"},{"size":485,"mtime":1610436545328,"results":"46","hashOfConfig":"28"},{"size":180,"mtime":1610434916454,"results":"47","hashOfConfig":"28"},{"size":639,"mtime":1610485388827,"results":"48","hashOfConfig":"28"},{"size":192,"mtime":1610434916470,"results":"49","hashOfConfig":"28"},{"size":177,"mtime":1610483927980,"results":"50","hashOfConfig":"28"},{"size":770,"mtime":1610484527029,"results":"51","hashOfConfig":"28"},{"size":246,"mtime":1610485388818,"results":"52","hashOfConfig":"28"},{"size":160,"mtime":1610488395001,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1cenfgm",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\index.js",[],["112","113"],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\App.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\reportWebVitals.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\MenuComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\dishes.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\DishdetailComponent.js",["114","115","116","117"],"import React, {Component} from 'react';\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    BreadcrumbItem,\r\n    Breadcrumb,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody, FormGroup, Label, Col, Button, Row\r\n} from 'reactstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Errors, LocalForm,Control} from \"react-redux-form\";\r\nimport {Loading} from \"./LoadingComponent\";\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val)||(val.length <=len);\r\nconst minLength = (len) => (val) => (val)&&(val.length >=len);\r\n\r\nclass CommentForm extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState(\r\n            {\r\n                isModalOpen: !this.state.isModalOpen\r\n            }\r\n        )\r\n    }\r\n\r\n    handleSubmit(values){\r\n       this.props.addComment(this.props.dishId,values.rating,values.author,values.comment)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"/>Submit Comment\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values => this.handleSubmit(values))}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\" md={12}>Rating</Label>\r\n                                <Col md={12}>\r\n                                        <Control.select className=\"form-control\" name=\"rating\" model=\".rating\" id=\"rating\">\r\n                                            <option>1</option>\r\n                                            <option>2</option>\r\n                                            <option>3</option>\r\n                                            <option>4</option>\r\n                                            <option>5</option>\r\n                                        </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"author\" md={12}>Your Name</Label>\r\n                                <Col md={12}>\r\n                                    <Control.text className=\"form-control\" model=\".author\" id=\"author\" name=\"author\" placeholder=\"Your Name\"\r\n                                                  validators={\r\n                                                      {\r\n                                                          required,minLength:minLength(3),maxLength: maxLength(15)\r\n                                                      }\r\n                                                  }/>\r\n                                    <Errors model=\".author\" className=\"text-danger\" show=\"touched\" messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 3 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}/>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\" md={12}>Comment</Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea className=\"form-control\" model=\".comment\" id=\"comment\" name=\"comment\" row=\"6\">\r\n\r\n                                    </Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10,offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n    //show dish detail\r\n   function RenderDish({dish}){\r\n        //dish exists, show it in card\r\n        if(dish != null){\r\n            return(\r\n                <Card>\r\n                    <CardImg width=\"100%\" src={dish[0].image} alt={dish[0].name}/>\r\n                    <CardBody>\r\n                        <CardTitle>\r\n                            {dish[0].name}\r\n                        </CardTitle>\r\n                        <CardText>\r\n                            {dish[0].description}\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        }else{//dish doesn't exists, show empty div\r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\n\r\n    function RenderComments({dish,addComment,dishId}){\r\n        let comments =\"\";//used to store the comments if the dish has comments\r\n        if(dish != null) {\r\n            const commentsArray = dish;\r\n            if (commentsArray != null) {\r\n                comments = commentsArray.map((comment) => {//map every comment in array, store the UI into comments\r\n                    return (\r\n\r\n                        <div key={comment.id}>\r\n                            <ul className=\"list-unstyled\">\r\n                                <li>{comment.comment}</li>\r\n                                <li>-- {comment.author}, {new Intl.DateTimeFormat('en-AU',{year:'numeric',month:'short',day:'2-digit'}).format(new Date(Date.parse(comment.date)))}</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n\r\n                    );\r\n                })\r\n            }\r\n        }\r\n\r\n        //if dish is not null, show comments\r\n        if(dish != null){\r\n            return(\r\n                <div>\r\n                    <h4>Comments</h4>\r\n                    {comments}\r\n                    <CommentForm dishId = {dishId} addComment={addComment}/>\r\n                </div>\r\n            );\r\n        }else {//if dish is null which means it is initialized at first time, don't show Comments heading\r\n            return(\r\n                <div></div>\r\n            )\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n   const DishDetail =(props)=>\r\n{\r\n    if(props.isLoading){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }else if(props.errMess){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }else {\r\n        //props contains selectedDishes as its key\r\n        //selectedDishes: {id: 3, name: \"ElaiCheese Cake\", image: \"assets/images/elaicheesecake.png\", c....\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/menu'>Menu</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>\r\n                            {props.dish[0].name}\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3> {props.dish[0].name}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderDish dish={props.dish}/>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-5 m-1\">\r\n                        <RenderComments dish={props.comments} addComment={props.addComment} dishId={props.dish[0].id}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default DishDetail","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\MainComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\HeaderComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\FooterComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\HomeComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\ContactComponent.js",["118","119","120","121","122","123","124","125","126","127","128","129"],"import React,{Component} from 'react';\r\nimport {Breadcrumb,BreadcrumbItem,Button,FormGroup,Label,Input,Col,Row,FormFeedback} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Control, Form,Errors,actions} from \"react-redux-form\";\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val)||(val.length <=len);\r\nconst minLength = (len) => (val) => (val)&&(val.length >=len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Contact extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state ={\r\n            firstname:'',\r\n            lastname:'',\r\n            telnum:'',\r\n            email:'',\r\n            agree:false,\r\n            contactType:'Tel.',\r\n            message:'',\r\n            touched:{\r\n                firstname:false,\r\n                lastname:false,\r\n                telnum:false,\r\n                email:false\r\n            }\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.handleInputChange = this.handleInputChange.bind(this);\r\n        // this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n\r\n    // handleInputChange(event){\r\n    //     const target = event.target;\r\n    //     const value = target.type ==='checkbox' ? target.checked : target.value;\r\n    //     const name = target.name;\r\n    //     this.setState({\r\n    //         [name]:value\r\n    //     })\r\n    // }\r\n\r\n    handleSubmit(values){\r\n        console.log(\"Current State is:\"+ JSON.stringify(values));\r\n        alert(\"Current State is:\"+ JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n    }\r\n    // handleBlur=(field) => (evt) => {\r\n    //     this.setState({\r\n    //         touched: { ...this.state.touched,[field]:true}\r\n    //     });\r\n    // }\r\n\r\n    // validate(firstname, lastname, telnum, email){\r\n    //     const errors = {\r\n    //         firstname:'',\r\n    //         lastname:'',\r\n    //         telnum:'',\r\n    //         email:''\r\n    //     };\r\n    //     if(this.state.touched.firstname && firstname.length < 3){\r\n    //         errors.firstname = 'First Name should be >= 3 characters';\r\n    //     }else if(this.state.touched.firstname && firstname.length>10){\r\n    //         errors.firstname = 'First Name should be <= 10 characters';\r\n    //     }\r\n    //\r\n    //     if(this.state.touched.lastname && lastname.length < 3){\r\n    //         errors.lastname = 'Last Name should be >= 3 characters';\r\n    //     }else if(this.state.touched.lastname && lastname.length>10){\r\n    //         errors.lastname = 'Last Name should be <= 10 characters';\r\n    //     }\r\n    //\r\n    //     const reg = /^\\d+$/;\r\n    //     if(this.state.touched.telnum && !reg.test(telnum))\r\n    //         errors.telnum = 'Tel.. Number should contain only numbers';\r\n    //     if(this.state.touched.email && email.split('').filter(x=> x==='@').length!==1)\r\n    //         errors.email = 'Email should contain a @';\r\n    //\r\n    //     return errors;\r\n    // }\r\n\r\n    render() {\r\n        // const errors = this.validate(this.state.firstname,this.state.lastname,this.state.telnum,this.state.email);\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/home'>Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>\r\n                            Contact us\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact us</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values)=>this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text className=\"form-control\" model=\".firstname\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\"\r\n                                                  validators={{\r\n                                        required,minLength:minLength(3),maxLength:maxLength(15)\r\n                                    }}\r\n                                    />\r\n                                    <Errors className=\"text-danger\" model=\".firstname\" show=\"touched\" messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text className=\"form-control\" model=\".lastname\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" validators={{\r\n                                        required,minLength:minLength(3),maxLength:maxLength(15)\r\n                                    }}/>\r\n                                    <Errors className=\"text-danger\" model=\".lastname\" show=\"touched\" messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 characters',\r\n                                        maxLength: 'Must be 15 characters or less'\r\n                                    }}/>\r\n                                    {/*<FormFeedback>{errors.lastname}</FormFeedback>*/}\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text className=\"form-control\" model=\".telnum\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. Num\" validators={{\r\n                                        required,minLength:minLength(3),maxLength:maxLength(15),isNumber\r\n                                    }}/>\r\n                                    <Errors className=\"text-danger\" model=\".telnum\" show=\"touched\" messages={{\r\n                                        required: 'Required',\r\n                                        minLength: 'Must be greater than 2 numbers',\r\n                                        maxLength: 'Must be 15 numbers or less',\r\n                                        isNumber:\"Must be a number\"\r\n                                    }}/>\r\n                                    {/*<FormFeedback>{errors.telnum}</FormFeedback>*/}\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text className=\"form-control\" model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email\" validators={{\r\n                                        required, validEmail\r\n                                    }} />\r\n                                    <Errors className=\"text-danger\" model=\".email\" show=\"touched\" messages={{\r\n                                        required: 'Required',\r\n                                        validEmail:'Invalid Emaill Address'\r\n                                    }}/>\r\n                                    {/*<FormFeedback>{errors.email}</FormFeedback>*/}\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:6, offset:2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox className=\"form-check-input\" model=\".agree\" name=\"agree\"/> {' '}<strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size:3, offset:1}}>\r\n                                    <Control.select className=\"form-control\" model=\".contactType\" name=\"contactType\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"feedback\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea className=\"form-control\" model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\">\r\n                                    </Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10,offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Contact;","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\comments.js",[],["130","131"],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\promotions.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\shared\\leaders.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\AboutComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\RenderLeader.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\reducer.js",[],["132","133"],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\comments.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\leaders.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\dishes.js",["134"],"import {DISHES} from \"../shared/dishes\";\r\nimport * as ActionTypes from './ActionTypes';\r\nexport const Dishes = (state = {\r\n    isLoading:true,\r\n    errMess: null,\r\n    dishes:[]\r\n}, action) =>{\r\n    switch (action.type){\r\n        case ActionTypes.ADD_DISHES:\r\n            return {...state, isLoading: false,errMess: null,dishes: action.payload}\r\n        case ActionTypes.DISHES_LOADING:\r\n            return {...state, isLoading: true,errMess: null,dishes: []}\r\n        case ActionTypes.DISHES_FAILED:\r\n            return {...state, isLoading: false,errMess: action.payload,dishes: []}\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\ActionCreators.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\compoents\\LoadingComponent.js",[],"C:\\Users\\haora\\WebstormProjects\\confusion\\src\\redux\\form.js",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":12,"column":16,"nodeType":"141","messageId":"142","endLine":12,"endColumn":25},{"ruleId":"143","severity":1,"message":"144","line":58,"column":41,"nodeType":"145","endLine":58,"endColumn":124},{"ruleId":"143","severity":1,"message":"146","line":71,"column":37,"nodeType":"145","endLine":76,"endColumn":54},{"ruleId":"143","severity":1,"message":"147","line":88,"column":37,"nodeType":"145","endLine":88,"endColumn":133},{"ruleId":"139","severity":1,"message":"140","line":2,"column":42,"nodeType":"141","messageId":"142","endLine":2,"endColumn":51},{"ruleId":"139","severity":1,"message":"148","line":2,"column":58,"nodeType":"141","messageId":"142","endLine":2,"endColumn":63},{"ruleId":"139","severity":1,"message":"149","line":2,"column":72,"nodeType":"141","messageId":"142","endLine":2,"endColumn":84},{"ruleId":"139","severity":1,"message":"150","line":4,"column":30,"nodeType":"141","messageId":"142","endLine":4,"endColumn":37},{"ruleId":"151","severity":1,"message":"152","line":123,"column":29,"nodeType":"145","endLine":123,"endColumn":71},{"ruleId":"143","severity":1,"message":"146","line":137,"column":37,"nodeType":"145","endLine":141,"endColumn":39},{"ruleId":"143","severity":1,"message":"146","line":152,"column":37,"nodeType":"145","endLine":154,"endColumn":41},{"ruleId":"143","severity":1,"message":"146","line":166,"column":37,"nodeType":"145","endLine":168,"endColumn":41},{"ruleId":"143","severity":1,"message":"146","line":181,"column":37,"nodeType":"145","endLine":183,"endColumn":42},{"ruleId":"143","severity":1,"message":"153","line":195,"column":45,"nodeType":"145","endLine":195,"endColumn":121},{"ruleId":"143","severity":1,"message":"144","line":200,"column":37,"nodeType":"145","endLine":200,"endColumn":118},{"ruleId":"143","severity":1,"message":"147","line":209,"column":37,"nodeType":"145","endLine":210,"endColumn":51},{"ruleId":"135","replacedBy":"154"},{"ruleId":"137","replacedBy":"155"},{"ruleId":"135","replacedBy":"156"},{"ruleId":"137","replacedBy":"157"},{"ruleId":"139","severity":1,"message":"158","line":1,"column":9,"nodeType":"141","messageId":"142","endLine":1,"endColumn":15},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'FormGroup' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'Input' is defined but never used.","'FormFeedback' is defined but never used.","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["159"],["160"],["159"],["160"],"'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]